// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Select between D and A
    Mux16(a = instruction, b = ALUout, sel = instruction[15], out = MuxAOut);

    // Handle loading of A register - A instructions or C instructions with correct bit
    Not(in = instruction[15], out = notA);
    Or(a = instruction[5], b = notA, out = loadA);
    ARegister(in = MuxAOut, load = loadA, out = AOut, out[0..14] = addressM);

    // Select between A and M
    And(a = instruction[15], b = instruction[12], out = ALUInputSel);
    Mux16(a = AOut, b = inM, sel = ALUInputSel, out = ALUInput1);

    // Handle loading of D register - Only C instructions with correct bit
    And(a = instruction[4], b = instruction[15], out = DLoad);
    DRegister(in = ALUout, load = DLoad, out = ALUInput2);

    ALU(x = ALUInput2, y = ALUInput1, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = ALUout, zr = zr, ng = ng);

    // Handle writing to writeM - Only C instructions with correct bit
    And(a = instruction[3], b = instruction[15], out = writeM);

    // PC Logic
    Not(in = zr, out = notZero);
    Not(in = ng, out = positive);
    Or(a = ng, b = zr, out = ZeroOrNeg);
    And(a = positive, b = notZero, out = NotZeroAndPos);

    And(a = instruction[0], b = NotZeroAndPos, out = JGT);
    And(a = instruction[1], b = zr, out = JEQ);
    And(a = instruction[0], b = instruction[1], out = J01);
    And(a = J01, b = positive, out = JGE);
    And(a = instruction[2], b = ng, out = JLT);
    And(a = instruction[2], b = instruction[0], out = J02);
    And(a = J02, b = notZero, out = JNE);
    And(a = instruction[1], b = instruction[2], out = J12);
    And(a = J12, b = ZeroOrNeg, out = JLE);
    And(a = J01, b = instruction[2], out = JMP);

    // Only load PC if a JMP condition is valid
    Or(a = JGT, b = JEQ, out = load1);
    Or(a = JGE, b = JLT, out = load2);
    Or(a = JNE, b = JLE, out = load3);
    Or(a = load1, b = load2, out = L12);
    Or(a = load3, b = JMP, out = L34);
    Or(a = L12, b = L34, out = loadOut);

    // Only load for C instructions
    And(a = loadOut, b = instruction[15], out = finalLoad);

    PC(in = AOut, load = finalLoad, inc = true, reset = reset, out[0..14] = pc);
}